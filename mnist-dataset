'''
Simple Deep Convolutional Neural Network 
trained on the MNIST dataset involving the Dropout algorithm.
Achieved accuracy ~ 98%
'''
import keras
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, Dropout
from keras.optimizers import RMSprop
import matplotlib.pyplot as plt
#Test-Train data split
(x_train, y_train), (x_test, y_test) = mnist.load_data()
#Visualizing the images via plots
plt.subplot(221)
plt.imshow(X_train[1], cmap=plt.get_cmap('gray'))
plt.subplot(222)
plt.imshow(X_train[4], cmap=plt.get_cmap('gray'))
plt.subplot(223)
plt.imshow(X_train[11], cmap=plt.get_cmap('gray'))
plt.subplot(224)
plt.imshow(X_train[12], cmap=plt.get_cmap('gray'))
plt.show()
#Reshaping data to make it compatible to feed it to the neural network
x_train = x_train.reshape(60000, 784)
x_test = x_test.reshape(10000, 784)
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
#Dividing by 255 to obtain all values in the 0,1 range
x_train /= 255
x_test /= 255
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')
#Convert class vectors to binary class matrices; Converting each number from 0-9 into 1 10-bit sequence
y_train = keras.utils.to_categorical(y_train, 10)
y_test = keras.utils.to_categorical(y_test, 10)
#Building the final model involving dropouts
model = Sequential()
model.add(Dense(512, activation='relu', input_shape=(784,)))
model.add(Dropout(0.2))
model.add(Dense(512, activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(10, activation='softmax'))
model.summary()
#Defining the training parameters
model.compile(loss='categorical_crossentropy', optimizer=RMSprop(), metrics=['accuracy'])
#Training the model
model.fit(x_train, y_train, batch_size=128, epochs=20, verbose=1, validation_data=(x_test, y_test))
#Evaluating accuracy
score = model.evaluate(x_test, y_test, verbose=0)
print('Loss:', score[0]*100)
print('Accuracy:', score[1]*100)